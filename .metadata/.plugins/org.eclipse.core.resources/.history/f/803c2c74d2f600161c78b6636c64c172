package io.vedder.robotics.particlefilter;

import java.util.Optional;

import io.vedder.robotics.particlefilter.messages.SensorMessage;

public class SensorModel {
  private final double SENSOR_SIGMA;
  private final double LAMBDA_SIGMA;
  private final double RAYMAX;

  public SensorModel() {
    SENSOR_SIGMA = 0.1;
    LAMBDA_SIGMA = 0.1;
    RAYMAX = 4;
  }

  private double getProbability(final double mapReading, final double sensorReading) {
    return Utils.pSampleExponential(sensorReading, LAMBDA_SIGMA)
        + Utils.pSampleGuassian(sensorReading, mapReading, SENSOR_SIGMA)
        + Utils.pSampleUniform(sensorReading, 0, RAYMAX)
        + Utils.pSampleUniform(sensorReading, RAYMAX - 0.01, RAYMAX);
  }

  public double sampleSensor(final SensorMessage sensorMessage, final Particle belief,
      final Map map) {
    double currentAngle = sensorMessage.getMinAngle();
    double angleDelta = sensorMessage.getAngleIncrement();

    double probabilitySum = 0;

    for (double rayDepth : sensorMessage.getScanRays()) {
      Vector2d centerOfRobot = new Vector2d(belief.getPose().getX(), belief.getPose().getY());
      Vector2d rayEndpoint = new Vector2d(
          belief.getPose().getX() + RAYMAX * Math.sin(belief.getPose().getTheta() + currentAngle),
          belief.getPose().getY() + RAYMAX * -Math.cos(belief.getPose().getTheta() + currentAngle));

      // Find the closest intersect.
      double closestIntersectDistance = RAYMAX;
      for (final MapWall mapwall : map.getWalls()) {
        Optional<Vector2d> opt = Vector2d.getIntersection(mapwall.getPoint1(), mapwall.getPoint2(),
            centerOfRobot, rayEndpoint);
        if (opt.isPresent()) {
          Vector2d intersect = opt.get();
          if ((intersect.minus(centerOfRobot)).norm() < closestIntersectDistance) {
            closestIntersectDistance = intersect.minus(centerOfRobot).norm();
          }
        }
      }

      final double probability = getProbability(closestIntersectDistance, rayDepth);
      System.out.println("Probability: " + probability);
      probabilitySum += probability;
      currentAngle += angleDelta;

    }
    return probabilitySum / sensorMessage.getScanRays().size();
  }
}
