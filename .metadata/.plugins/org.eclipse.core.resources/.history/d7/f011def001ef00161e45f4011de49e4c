package io.vedder.robotics.particlefilter;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Map {

  public class Point {

    private final double x;
    private final double y;

    public Point(double x, double y) {
      this.x = x;
      this.y = y;
    }

    public double getX() {
      return x;
    }

    public double getY() {
      return y;
    }

    @Override
    public String toString() {
      return ("(" + x + "," + y + ")");
    }
    
    public Point minus(final Point other) {
      return new Point(this.getX() - other.getX(), this.getY() - other.getY());
    }
    
    public Point plus(final Point other) {
      return new Point(this.getX() + other.getX(), this.getY() + other.getY());
    }
    
    public double norm() {
      return Math.sqrt(Math.pow(this.getX(), 2) + Math.pow(this.getY(), 2));
    }
    
    public Point normalized() {
      return new Point(this.getX() / this.norm(), this.getY() / this.norm());
    }
    
    public double dot(final Point other) {
      return this.getX() * other.getX() + this.getY() * other.getY();
    }
  }

  class MapWall {
    private final Point point1, point2;

    public MapWall(Point point1, Point point2) {
      this.point1 = point1;
      this.point2 = point2;
    }

    public Point getPoint1() {
      return point1;
    }

    public Point getPoint2() {
      return point2;
    }
  }

  private final List<MapWall> walls;

  public Map(String mapPath) {
    try (Stream<String> stream = Files.lines(Paths.get(mapPath))) {
      walls = stream
          .map(l -> Arrays.asList(l.split(",")).stream().map(n -> Double.parseDouble(n))
              .collect(Collectors.toList()))
          .map(t -> new MapWall(new Point(t.get(0), t.get(1)), new Point(t.get(2), t.get(3))))
          .collect(Collectors.toList());

    } catch (IOException e) {
      System.out.println("Unable to read Map!");
      throw new IllegalStateException("Cannot open Map!");
    }
    System.out.println("Read " + walls.size() + " walls!");
  }
  
  private boolean isIntersecting(final MapWall mapWall, final Point startPoint, final Point endPoint) {
    final Point A = mapWall.getPoint1();
    final Point B = mapWall.getPoint2();
    final Point C = startPoint;
    final Point D = endPoint;
    return false;
  }

//  bool IsIntersecting(const Vector2f& A, const Vector2f& B, const Vector2f& C,
//      const Vector2f& D) {
//const Vector2f P = B - A;
//const Vector2f Q = D - C;
//
//const Vector2f R = (C - A) - ((C - A).dot(P.normalized()) * P.normalized());
//const Vector2f S = (D - A) - ((D - A).dot(P.normalized()) * P.normalized());
//
//const Vector2f T = (A - D) - ((A - D).dot(Q.normalized()) * Q.normalized());
//const Vector2f U = (B - D) - ((B - D).dot(Q.normalized()) * Q.normalized());
//
//return (R.dot(S) <= 0 && T.dot(U) <= 0);
//}
}
